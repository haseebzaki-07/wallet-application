// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     Int                      @id @default(autoincrement())
  email                  String?                  @unique
  name                   String?
  number                 String                   @unique
  password               String
  OnRampTransaction      OnRampTransaction[]
  Balance                Balance[]
  sentTransfers          p2pTransfer[]            @relation(name: "FromUserRelation")
  receivedTransfers      p2pTransfer[]            @relation(name: "ToUserRelation")
  UsertoMerchantTransfer UsertoMerchantTransfer[]
}

model Merchant {
  id                     Int                      @id @default(autoincrement())
  email                  String                   @unique
  name                   String?
  password               String?
  auth_type              AuthType
  OffRampTransaction     OffRampTransaction[]
  Balance                MerchantBalance[]
  sentTransfers          merchantTransfer[]       @relation(name: "FromMerchantRelation")
  receivedTransfers      merchantTransfer[]       @relation(name: "ToMerchantRelation")
  UsertoMerchantTransfer UsertoMerchantTransfer[]
}

model OnRampTransaction {
  id        Int          @id @default(autoincrement())
  status    OnRampStatus
  token     String       @unique //token
  provider  String //provider
  amount    Int
  startTime DateTime
  userId    Int
  user      User         @relation(fields: [userId], references: [id])
}

model OffRampTransaction {
  id         Int          @id @default(autoincrement())
  status     OnRampStatus
  token      String       @unique //token
  provider   String //provider
  amount     Int
  startTime  DateTime
  merchantId Int
  merchant   Merchant     @relation(fields: [merchantId], references: [id])
}

model p2pTransfer {
  id           Int      @id @default(autoincrement())
  transferTime DateTime
  amount       Int
  fromUserId   Int
  toUserId     Int
  fromUser     User     @relation(name: "FromUserRelation", fields: [fromUserId], references: [id])
  toUser       User     @relation(name: "ToUserRelation", fields: [toUserId], references: [id])
}

model merchantTransfer { //merchantTomerchantTransfer
  id             Int      @id @default(autoincrement())
  transferTime   DateTime
  amount         Int
  fromMerchantId Int
  toMerchantId   Int
  fromMerchant   Merchant @relation(name: "FromMerchantRelation", fields: [fromMerchantId], references: [id])
  toMerchant     Merchant @relation(name: "ToMerchantRelation", fields: [toMerchantId], references: [id])
}

model UsertoMerchantTransfer {
  id         Int      @id @default(autoincrement())
  amount     Int 
  datetime   DateTime 
  userId     Int
  merchantId Int
  product    String 
  fromUser   User     @relation(fields: [userId], references: [id])
  toMerchant Merchant @relation(fields: [merchantId], references: [id])
}

model Balance {
  id     Int  @id @default(autoincrement())
  userId Int  @unique
  amount Int
  locked Int
  user   User @relation(fields: [userId], references: [id])
}

model MerchantBalance {
  id         Int @id @default(autoincrement())
  merchantId Int @unique
  balance    Int

  merchant Merchant @relation(fields: [merchantId], references: [id])
}

enum OnRampStatus {
  Success
  Failure
  Processing
}

enum AuthType {
  Google
  Github
  Credentials
}
